///	LeeLoo: original info:/// \file Radio.h/// \brief Library header file for the radio libraries to control radio chips.////// \author Matthias Hertel, http://www.mathertel.de/// \copyright Copyright (c) 2014 by Matthias Hertel.\n/// This work is licensed under a BSD style license.\n/// See http://www.mathertel.de/License.aspx////// \details/// This library enables the use of diverse radio chips by sharing the same class definition./// Implementation for the following Radio Chips are available:/// * RDA5807M/// * SI4703/// * TEA5767////// The following chip is planned to be supported too:/// ...////// More documentation and source code is available at http://www.mathertel.de/Arduino////// History:/// --------/// * 08.07.2014 creation of the common radio class./// * 15.07.2014 examples working with RDA5807M./// * 26.08.2014 examples working with SI4703./// * 31.08.2014 Doxygen style comments added.// multi-Band enabled#ifndef __RADIO_RDA5807M__#define __RADIO_RDA5807M__#include <arduino.h>#include <Wire.h>// The DEBUG_xxx Macros enable Information to the Serial port.// They can be enabled by setting the _debugEnabled variable to true disabled by using the debugEnable function.// When the code has to be minimized they can be redefined without implementation like:// #define DEBUG_STR(txt) {}/// Used for Debugging text information.#define DEBUG_STR(txt)           if (_debugEnabled) { Serial.println(txt); }/// Used for Debugging function entries without parameters.#define DEBUG_VAL(label, val)    if (_debugEnabled) { Serial.print(label);  Serial.print(':');  Serial.println(val); }/// Used for Debugging function entries without parameters.#define DEBUG_FUNC0(fn)          if (_debugEnabled) { Serial.print(fn); Serial.println("()"); }/// Used for Debugging function entries with 1 parameter.#define DEBUG_FUNC1(fn, p1)      if (_debugEnabled) { Serial.print(fn); Serial.print('('); Serial.print(p1); Serial.println(')'); }/// Used for Debugging function entries with 1 parameters as hex Value.#define DEBUG_FUNC1X(fn, p1) if (_debugEnabled) { Serial.print(fn); Serial.print("(0x"); Serial.print(p1, HEX); Serial.println(')'); }/// Used for Debugging function entries with 2 parameters.#define DEBUG_FUNC2(fn, p1, p2)  if (_debugEnabled) { Serial.print(fn); Serial.print('('); Serial.print(p1); Serial.print(", "); Serial.print(p2); Serial.println(')'); }/// Used for Debugging function entries with 2 parameters and Hex Value.#define DEBUG_FUNC2X(fn, p1, p2) if (_debugEnabled) { Serial.print(fn); Serial.print('('); Serial.print(p1); Serial.print(", 0x"); Serial.print(p2, HEX); Serial.println(')'); }// ----- Callback function types -----/// callback function for passing RDS data.extern "C" {	//	4 words	typedef void (*receiveRDSFunction)(const uint16_t *block);}// ----- type definitions -----/// Band datatype./// The BANDs a receiver probably can implement.enum RADIO_BAND {  RADIO_BAND_NONE    = 0, ///< No band selected.  RADIO_BAND_FM      = 1, ///< FM band 87.5 ñ 108 MHz (USA, Europe) selected.  RADIO_BAND_FMWORLD = 2, ///< FM band 76 ñ 108 MHz (Japan, Worldwide) selected.  RADIO_BAND_AM      = 3, ///< AM band selected.  RADIO_BAND_KW      = 4, ///< KW band selected.  RADIO_BAND_MAX     = 4  ///< Maximal band enumeration value.};/// Frequency data type./// Only 16 bits are used for any frequency value (not the real one)typedef uint16_t RADIO_FREQ;/// A structure that contains information about the radio features from the chip.typedef struct RADIO_INFO {  bool active;   ///< receiving is active.  uint8_t rssi;  ///< Radio Station Strength Information.  bool rds;      ///< RDS information is available.  bool tuned;    ///< A stable frequency is tuned.  bool mono;     ///< Mono mode is on.  bool stereo;   ///< Stereo audio is available};/// a structure that contains information about the audio featurestypedef struct AUDIO_INFO {  uint8_t volume;  bool mute;  bool softmute;  bool bassBoost;};// ----- common RADIO class definition -----class RADIO_RDA5807M {  public:	RADIO_RDA5807M(); ///< create a new object from this class.	bool   init();  ///< initialize library and the chip.	void   term();  ///< terminate all radio functions.  // ----- Audio features -----	void    setVolume(uint8_t newVolume); ///< Set the output volume of the chip to 0 .. 15.	uint8_t getVolume();                  ///< Retrieve the current output volume.	void   setBassBoost(bool switchOn);   ///< Set the bass boost function on or off.	bool   getBassBoost();                ///< Retrieve the current bass boost function setting.	void   setMono(bool switchOn);        ///< Set the mono mode on or off.	bool   getMono();                     ///< Retrieve the current mono mode setting.	void   setMute(bool switchOn);        ///< Set the mute mode on or off.	bool   getMute();                     ///< Retrieve the current mute mode setting.	void   setSoftMute(bool switchOn);    ///< Set the soft mute mode (mute on low signals) on or off.	bool   getSoftMute();                 ///< Retrieve the current soft mute mode (mute on low signals) setting.  // ----- Receiver features -----	void setBand(RADIO_BAND newBand);     ///< Set the current band.	RADIO_BAND getBand();                 ///< Retrieve the current band settings from the chip.	void    setFrequency(RADIO_FREQ newF);  ///< Set the frequency to be tuned.	RADIO_FREQ getFrequency(void);          ///< Retrieve the current tuned frequency from the chip.	void setBandFrequency(RADIO_BAND newBand, RADIO_FREQ newFreq); ///< Set Band and Frequency in one call.	void seekUp(bool toNextSender = true);   ///< start seek mode upwards	void seekDown(bool toNextSender = true); ///< start seek mode downwards	RADIO_FREQ getMinFrequency();   ///< Get the minimum frequency of the current selected band.	RADIO_FREQ getMaxFrequency();   ///< Get the maximum frequency of the current selected band.	RADIO_FREQ getFrequencyStep();  ///< Get resolution of the current selected band.  // ----- combined status functions -----	void getRadioInfo(RADIO_INFO *info); ///< Retrieve some information about the current radio function of the chip.	void getAudioInfo(AUDIO_INFO *info); ///< Retrieve some information about the current audio function of the chip.  // ----- Supporting RDS for FM bands -----	void checkRDS(); ///< Check if RDS Data is available and good.	void attachReceiveRDS(receiveRDSFunction newFunction); ///< Register a RDS processor function.	const uint16_t * getRDSBlocks();  // ----- Utilities -----  /// Format the current frequency for display and printing.	void formatFrequency(char *s, uint8_t length);  // ----- debug Helpers send information to Serial port	void debugEnable(bool enable = true);  ///< Enable sending debug information to the Serial port.	void debugRadioInfo(); ///< Print out all radio information.	void debugAudioInfo(); ///< Print out all audio information.	void debugStatus();    ///< Send debug information about actual available chip functionality and other internal things.	void debugScan();      // Scan all frequencies and report a statusprotected:	bool _debugEnabled; ///< Set by debugEnable() and controls debugging functionality.    uint8_t MAXVOLUME; ///< max volume level for the radio implementations	uint8_t _volume;    ///< Last set volume level.	bool    _bassBoost; ///< Last set bass Boost effect.	bool    _mono;      ///< Last set mono effect.	bool    _mute;      ///< Last set mute effect.	bool    _softMute;  ///< Last set softMute effect.  RADIO_BAND _band;   ///< Last set band.  RADIO_FREQ _freq;   ///< Last set frequency.  RADIO_FREQ _freqLow;    ///< Lowest frequency of the current selected band.  RADIO_FREQ _freqHigh;   ///< Highest frequency of the current selected band.  RADIO_FREQ _freqSteps;  ///< Resulution of the tuner.  receiveRDSFunction _sendRDS; ///< Registered RDS Function that is called on new available data.  void _printHex4(uint16_t val); ///> Prints a register as 4 character hexadecimal code with leading zeros.private:  void int16_to_s(char *s, uint16_t val); ///< Converts a int16 number to a string, similar to itoa, but using the format "00000".  uint16_t registers[16];  // memory representation of the registers  // ----- low level communication to the chip using I2C bus  void     _readRegisters(); // read all status & data registers  void     _saveRegisters();     // Save writable registers back to the chip  void     _saveRegister(byte regNr); // Save one register back to the chip  void     _write16(uint16_t val);        // Write 16 Bit Value on I2C-Bus  uint16_t _read16(void);}; // class RADIO_RDA5807M#endif	//	__RADIO_RDA5807M__